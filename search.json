[{"title":"Gitbook简介及安装","url":"%2Fgitbook-begin-install.html","content":"\n\n### 简介\n\n​\t本手册基于Gitbook版本2.3.2，主要就Gitbook的安装、配置、插件、主题等进行介绍与说明。\n\n​\t由于本人在Gitbook上是初学，故多会参考或翻译官方文档以及网上一些内容。由于本人水平有限，如翻译或引用不正确，请多包涵！\n<!-- more -->\n​\t\t[Gitbook主页](https://www.gitbook.com)\n\n​\t\t[Gitbook在Github的地址](https://github.com/GitbookIO/gitbook/)\n\n​\t\t[Gitbook Toolchain Documentation](https://toolchain.gitbook.com/)\n\n### 安装\n\n​\tGitbook的安装还是比较简单的，本文的介绍都是基于本地安装Gitbook,但如果[官网](https://www.gitbook.com)提供的服务已经满足了您的需求，则可忽略本文档。由于本人使用的window系统，以下介绍也是基于window系统介绍的。\n\n\n#### 系统要求\n\n安装Gitbook很容易，但是系统必须满足如下要求：\n\n- NodeJS(建议v4.00或以上)\n\nGitbook可安装在Windows,Linux,Unix或者Mac OS X上。\n\n#### 通过NPM安装\n\n最方便的就是通过NPM来安装Gitbook。在系统终端的提示符下，只需要简单的输入如下命令就可以安装Gitbook。\n\n```\nc:\\>npm install gitbook-cli -g\n```\n\ngitbook-cli是一个可在同一个操作系统下安装和使用多个Gitbook的应用。它能自动安装Gitbook的最合适版本来编译书籍。\n\n由于使用windows系统，安装完成以后却无法使用gitbook命令，后来查资料才搞明白，设置好路径就可以了。一般安装了gitbook-cli后，在C:\\使用者\\用户登录名\\\\.gitbook下的versions目录下会有对应版本的gitbook。在npm命令中使用参数-g，则表明将gitbook-cli全局安装到Node对应的路径下。该路径为C:\\使用者\\用户登录名\\\\.nodejs\\node_global；在该路径下应该可发现gitbook命令，如发现则证明安装正确了，将该路径加入到系统路径即可。设置好后在系统终端就可以使用gitbook命令了。","tags":["gitbook"]},{"title":"Git简单说明书","url":"%2Fgitcheetsheet.html","content":"\nGit是开源的分布式版本控制系统，可以很方便在笔记本或电脑上操作Github。这个简单说明书总结了Git的常用命令，以便各位能做个快速的参考！<!-- more -->\t\n## 安装GIT ##\nGitHub提供了包含有图形用户界面的桌面客户端，并为更高级场景提供了最常用的版本库操作和自动更新命令。\n### Windows版本的GitHub ###\nhttps://windows.github.com\n### Mac版本的GitHub ###\nhttp://mac.github.com\n### 其他版本的Git ###\nGit为Linux和POSIX系统发布的可用版本在GIT SCM官网上。\nhttp://git-scm.com\n\n## 配置工具 ##\n为所有本地版本库配置用户信息。Git的设置文件为.gitconfig。全局配置在用户主目录，项目配置在项目目录。\n```\n$ git config --global user.name \"[name]\"\n设置提交代码时的用户名称\n```\n```\n$ git config --global user.email \"[email address]\"\n设置提交代码时的电子邮箱\n```\n```\n$ git config --global color.ui auto\"\n设置命令提示的输出颜色\n```\n\n## 建立版本库 ##\n开始建立一个新的版本库或从指定的URL中获取一个新的版本库。\n```\n$ git init [project-name]\n按指定名称建立一个新的版本库\n```\n```\n$ git clone [url]\n下载一个项目以及其完整的历史版本\n```\n\n## 显示信息 ##\n审查要提交的编辑和草稿\n```\n$ git status\n显示要提交的所有新的和更改的文件\n```\n```\n$ git diff\n显示暂存区和工作区的差别\n```\n```\n$ git add [file]\n将要版本控制的文件加入到暂存区中\n```\n```\n$ git diff --staged\n显示暂存区中和最新版本的文件之间的差别\n```\n```\n$ git reset [file]\n将文件从暂存区中移除，但保留文件的内容\n```\n```\n$ git commit -m \"[descriptive message]\"\n将暂存区中文件提交到版本库中\n```\n\n## 分支操作 ##\n分支操作的一系列命令\n```\n$ git branch\n列出当前版本库中所有本地分支\n```\n```\n$ git branch 【branch-name】\n建立一个新的分支\n```\n```\n$ git checkout [branch-name]\n切换到指定分支并更新工作区目录\n```\n```\n$ git merge [branch]\n将指定分支的历史记录合并到当前分支中去\n```\n```\n$ git branch -d [branch-name]\n删除指定的分支\n```\n\n## 撤销 ##\n重分配和删除版本控制文件\n```\n$ git rm [file]\n从工作区删除文件，并将删除放入在暂存区\n```\n```\n$ git rm --cached [file]\n将文件移除版本控制，但保留本地文件在工作区\n```\n```\n$ git mv [file-original] [file-renamed]\n修改文件名，并将这个改名放在暂存区\n```\n\n## 忽略文件 ##\n将临时文件和目录排除在版本控制之外\n\n```\n*.log\nbuild/\ntemp-*\n一个名为.gitignore的文本文件，它会将符合指定格式匹配的文件和路径移除在版本控制中\n```\n```\n$ git ls-files --other --ignored --exclude-standard\n列出项目中所有忽略的文件\n```\n\n## 暂存区管理 ##\n暂存区可提交或恢复未完成的改变\n```\n$ git stash\n临时保存所有修改的文件\n```\n```\n$ git stash pop\n恢复最近的临时保存的文件\n```\n```\n$ git stash list\n显示暂存区中的所有改变\n```\n```\n$ git stash list\n放弃最近的暂存区中的改变\n```\n\n## 日志查看 ##\n浏览和监控项目文件中的变化\n```\n$ git log\n列出当前分支的所有历史版本\n```\n```\n$ git log --follow [file]\n列出指定文件的历史版本(包括更名)\n```\n```\n$ git diff [first-branch]...[second-branch]\n显示2个分支中内容的不同之处\n```\n```\n$ git show [commit]\n输出指定提交的原始数据和内容的改变\n```\n\n## 重做提交 ##\n擦除錯誤和草稿中历史版本\n```\n$ git reset [commit]\n重置在[commit]后的所有提交，但保留本地改变\n```\n```\n$ git reset --hard [commit]\n放弃所有历史版本和改变，回退到指定的[commit]\n```\n\n## 同步改变 ##\n注册版本库中的书签并交换历史版本\n```\n$ git fetch [bookmark]\n从指定版本库的[bookmark]中下载所有历史版本\n```\n```\n$ git merge [bookmark]/[branch]\n合并分支书签到当前本地分支中去\n```\n```\n$ git push [alias] [branch]\n提交所有本地分支到GitHub中去\n```\n```\n$ git pull\n下载历史更新并合并更改\n```","tags":["git"],"categories":["git"]},{"title":"公益404","url":"%2F404%2Findex.html","content":"\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://szdastone.github.io\" homePageName=\"回到我的主页\"></script>\n"},{"title":"关于","url":"%2Fabout%2Findex.html","content":"\n<blockquote class=\"blockquote-center\">\n练得身形似鹤形，\n千株松下两函经。\n我来问道无馀说，\n云在青天水在瓶。\n</blockquote>\n## 关于我 ##\n- 暂时还没有想好怎么写，先留空，有待来日增加！\n- 可email我，email:dastone@126.com\n- 有什么想和我说的，请留言！\n"},{"title":"分类","url":"%2Fcategories%2Findex.html"},{"title":"标签","url":"%2Ftags%2Findex.html"},{"title":"schedule","url":"%2Fschedule%2Findex.html"},{"title":"琅琊榜","url":"%2Ftop%2Findex.html"}]