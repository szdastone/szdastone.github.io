[{"title":"Gitbook命令和配置","url":"%2Fgitbook-command-setup.html","content":"\n本文主要介绍gitbook的几个常用命令以及一些基本配置。 <!-- more -->\n\n### 命令\n\n这里介绍下gitbook的几个常用命令。\n\n#### 初始化init\n\ngitbook init命令可初始化书籍目录。\n\n在使用这个命令时，首先需要新建立一个目录，然后在这个目录下新增加README.md与SUMMARY.md；如新建目录为book,则该目录结构为：\n\n```\nc:\\>tree book /f\n\tREADME.md\n\tSUMMARY.md\n```\n\n其中README.md是对本书籍的介绍，这个是必须文件。\n\nSUMMARY.md是本书籍的目录结构。比如内容为：\n\n```\n# Summary\n\n* [Introduction](README.md)\n* [第一章](chapter1/README.md)\n    * [第一节](chapter1/section1.1.md)\n    * [第二节](chapter1/section1.2.md)\n* [第二章](chapter2/README.md)\n```\n\n以上为示例。大家可根据自己实际需要来编写目录；\n\n编号目录后再系统终端的命令提示符下，输入命令：\n\n```\nc:\\>book\\gitbook init\n```\n\n命令完成后，你会发现按你所编写的目录结构生成了初始的文件，只需要按每个文件编写内容即可了。\n\n#### 预览serve\n\n如你编写好了内容要预览的话，可使用如下命令：\n\n```\nc:\\>book\\gitbook serve\n```\n\n该命令成功以后，则可以在本地浏览器通过http://localhost:4000 来查看gitbook运行的效果了。\n\n#### 生成build\n\n如编写好书籍后，可通过build命令来生成静态网页：\n\n```\nc:\\book\\gitbook build\n```\n\n通过build命令后，会发现在book目录下会有一个新的目录_book，所有静态网页的内容都在这个目录下，可将这个目录的所有内容放在服务器上运行。其实在运行serve命令时就会首先运行build命令来生成静态网页，然后serve自行打开一个web服务器并通过监控4000端口来发布静态网页。\n\n#### 其它命令\n\n注意的是gitbook-cli和gitbook是2个不同软件，gitbook-cli会将gitbook不同版本下载到C:\\使用者\\用户登录名\\\\.gitbook中，但可通过设置GITBOOK_DIR环境变量来指定不同的文件夹。\n\n#### gitbook-cli的帮助信息\n\n```\nc:\\>gitbook --help\n```\n\n\n\n##### 列出gitbook所有能用的命令\n\n```\nc:\\>gitbook help\n```\n\n##### 指定版本\n\nGItbook CLI会使用缺省的最新Gitbook版本，但你也可以通过参数--gitbook来指定版本，如：\n\n```\nc:\\>gitbook build ./book --gitbook=2.0.1\n```\n\n可列出指定版本可用的命令：\n\n```\nc:\\>gitbook help --gitbook=2.0.1\n```\n\n#### 版本管理\n\n##### 列出所有版本\n\n```\nc:\\>gitbook ls\n```\n\n##### 列出NPM上可用的版本\n\n```\nc:\\>gitbook ls-remote\n```\n\n##### 安装指定版本\n\n```\nc:\\>gitbook fetch 2.1.0\n# 或者前一个版本\nc:\\>gitbook fetch beta\n```\n\n##### 更新到最新版本\n\n```\nc:\\>gitbook update\n```\n\n##### 卸载指定版本\n\n```\nc:\\>gitbook uninstall 2.0.1\n```\n\n##### 使用本地文件夹做GitBook的版本(用于开发)\n\n```\nc:\\>gitbook alias ./mygitbook latest\n```\n\n##### 调试\n\n可使用参数选项--log=debug 和--debug来得到各详细错误信息，以便能进行排错；如：\n\n```\nc:\\>gitbook build ./ --log=debug --debug\n```\n\n### 配置\n\n其实Gitbook是零配置的。如果不想做出其他效果，那么就可以不进行任何配置。\n\n如要进行配置的话，那么需要自己建立一个book.json文件在书籍目录下。\n\n先了解下book.json的基本配置吧。\n\n#### 基本配置\n\n| 变量       | 描述                                                    |\n| ---------- | ------------------------------------------------------- |\n| root       | 包含书籍所有文件的根文件夹                              |\n| structure  | 指定README,SUMMARY,GLOSSARY等的路径                     |\n| title      | 书籍的标题，缺省值从README获取                          |\n| decription | 书籍的描述，缺省值从README获取                          |\n| author     | 书籍的作者                                              |\n| isbn       | 书籍的ISBN                                              |\n| language   | 书籍的语言，缺省为en                                    |\n| direction  | 文字的排版方向。可以为rtl或ltr,缺省值因爱language的设定 |\n| gitbook    | Gitbook将使用的版本，可指定版本或接受如“>=3.0.0”的条件  |\n\n#### 插件Plugins\n\n插件以及其配置都是指定在book.json中。从3.0.0版本以后，Gitbook可使用主题。\n\n| 变量          | 描述             |\n| ------------- | ---------------- |\n| plugins       | 要加载的插件列表 |\n| pluginsConfig | 插件的配置       |\n\n#### Structure\n\n除了root变量外，可为gitbook指定README,SUMMARY,GLOSSARY,LANGUAGES等文件的名称，比如README使用缺省名称为README.md。这些文件将放在书籍的根目录(或者放在不同语言的根目录下)。形如dir/MY_README.md的路径是不接受的。\n\n| 变量                | 描述                                |\n| ------------------- | ----------------------------------- |\n| structure.readme    | Readme文件的名称，缺省README.md     |\n| structure.summary   | Summary文件的名称，缺省SUMMARY.md   |\n| structure.glossary  | Glossary文件的名称，缺省GLOSSARY.md |\n| structure.languages | Languages文件的名称，缺省为LANGS.md |\n\n#### PDF选项\n\nPDF的输出可在book.json中配置，支持的参数如下：\n\n| 变量              | 描述                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| pdf.pageNumbers   | 在每页的底部增加页码数，缺省为true                           |\n| pdf.fontSize      | 设置字体大小，缺省为12                                       |\n| pdf.fontFamily    | 设置字体，缺省为Arial                                        |\n| pdf.paperSize     | 设置纸张大小，可选为'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'legal', 'letter'，缺省为a4 |\n| pdf.margin.top    | 页眉，缺省为56                                               |\n| pdf.margin.bottom | 页尾，缺省为56                                               |\n| pdf.margin.right  | 右边距，缺省为62                                             |\n| pdf.margin.left   | 左边距，缺省为62                                             |\n\n","tags":["gitbook"],"categories":["gitbook"]},{"title":"Gitbook简介及安装","url":"%2Fgitbook-begin-install.html","content":"\n\n### 简介\n\n​\t本手册基于Gitbook版本2.3.2，主要就Gitbook的安装、配置、插件、主题等进行介绍与说明。\n\n​\t由于本人在Gitbook上是初学，故多会参考或翻译官方文档以及网上一些内容。由于本人水平有限，如翻译或引用不正确，请多包涵！\n<!-- more -->\n​\t\t[Gitbook主页](https://www.gitbook.com)\n\n​\t\t[Gitbook在Github的地址](https://github.com/GitbookIO/gitbook/)\n\n​\t\t[Gitbook Toolchain Documentation](https://toolchain.gitbook.com/)\n\n### 安装\n\n​\tGitbook的安装还是比较简单的，本文的介绍都是基于本地安装Gitbook,但如果[官网](https://www.gitbook.com)提供的服务已经满足了您的需求，则可忽略本文档。由于本人使用的window系统，以下介绍也是基于window系统介绍的。\n\n\n#### 系统要求\n\n安装Gitbook很容易，但是系统必须满足如下要求：\n\n- NodeJS(建议v4.00或以上)\n\nGitbook可安装在Windows,Linux,Unix或者Mac OS X上。\n\n#### 通过NPM安装\n\n最方便的就是通过NPM来安装Gitbook。在系统终端的提示符下，只需要简单的输入如下命令就可以安装Gitbook。\n\n```\nc:\\>npm install gitbook-cli -g\n```\n\ngitbook-cli是一个可在同一个操作系统下安装和使用多个Gitbook的应用。它能自动安装Gitbook的最合适版本来编译书籍。\n\n由于使用windows系统，安装完成以后却无法使用gitbook命令，后来查资料才搞明白，设置好路径就可以了。一般安装了gitbook-cli后，在C:\\使用者\\用户登录名\\\\.gitbook下的versions目录下会有对应版本的gitbook。在npm命令中使用参数-g，则表明将gitbook-cli全局安装到Node对应的路径下。该路径为C:\\使用者\\用户登录名\\\\.nodejs\\node_global；在该路径下应该可发现gitbook命令，如发现则证明安装正确了，将该路径加入到系统路径即可。设置好后在系统终端就可以使用gitbook命令了。","tags":["gitbook"],"categories":["gitbook"]},{"title":"Git简单说明书","url":"%2Fgitcheetsheet.html","content":"\nGit是开源的分布式版本控制系统，可以很方便在笔记本或电脑上操作Github。这个简单说明书总结了Git的常用命令，以便各位能做个快速的参考！<!-- more -->\t\n## 安装GIT ##\nGitHub提供了包含有图形用户界面的桌面客户端，并为更高级场景提供了最常用的版本库操作和自动更新命令。\n### Windows版本的GitHub ###\nhttps://windows.github.com\n### Mac版本的GitHub ###\nhttp://mac.github.com\n### 其他版本的Git ###\nGit为Linux和POSIX系统发布的可用版本在GIT SCM官网上。\nhttp://git-scm.com\n\n## 配置工具 ##\n为所有本地版本库配置用户信息。Git的设置文件为.gitconfig。全局配置在用户主目录，项目配置在项目目录。\n```\n$ git config --global user.name \"[name]\"\n设置提交代码时的用户名称\n```\n```\n$ git config --global user.email \"[email address]\"\n设置提交代码时的电子邮箱\n```\n```\n$ git config --global color.ui auto\"\n设置命令提示的输出颜色\n```\n\n## 建立版本库 ##\n开始建立一个新的版本库或从指定的URL中获取一个新的版本库。\n```\n$ git init [project-name]\n按指定名称建立一个新的版本库\n```\n```\n$ git clone [url]\n下载一个项目以及其完整的历史版本\n```\n\n## 显示信息 ##\n审查要提交的编辑和草稿\n```\n$ git status\n显示要提交的所有新的和更改的文件\n```\n```\n$ git diff\n显示暂存区和工作区的差别\n```\n```\n$ git add [file]\n将要版本控制的文件加入到暂存区中\n```\n```\n$ git diff --staged\n显示暂存区中和最新版本的文件之间的差别\n```\n```\n$ git reset [file]\n将文件从暂存区中移除，但保留文件的内容\n```\n```\n$ git commit -m \"[descriptive message]\"\n将暂存区中文件提交到版本库中\n```\n\n## 分支操作 ##\n分支操作的一系列命令\n```\n$ git branch\n列出当前版本库中所有本地分支\n```\n```\n$ git branch 【branch-name】\n建立一个新的分支\n```\n```\n$ git checkout [branch-name]\n切换到指定分支并更新工作区目录\n```\n```\n$ git merge [branch]\n将指定分支的历史记录合并到当前分支中去\n```\n```\n$ git branch -d [branch-name]\n删除指定的分支\n```\n\n## 撤销 ##\n重分配和删除版本控制文件\n```\n$ git rm [file]\n从工作区删除文件，并将删除放入在暂存区\n```\n```\n$ git rm --cached [file]\n将文件移除版本控制，但保留本地文件在工作区\n```\n```\n$ git mv [file-original] [file-renamed]\n修改文件名，并将这个改名放在暂存区\n```\n\n## 忽略文件 ##\n将临时文件和目录排除在版本控制之外\n\n```\n*.log\nbuild/\ntemp-*\n一个名为.gitignore的文本文件，它会将符合指定格式匹配的文件和路径移除在版本控制中\n```\n```\n$ git ls-files --other --ignored --exclude-standard\n列出项目中所有忽略的文件\n```\n\n## 暂存区管理 ##\n暂存区可提交或恢复未完成的改变\n```\n$ git stash\n临时保存所有修改的文件\n```\n```\n$ git stash pop\n恢复最近的临时保存的文件\n```\n```\n$ git stash list\n显示暂存区中的所有改变\n```\n```\n$ git stash list\n放弃最近的暂存区中的改变\n```\n\n## 日志查看 ##\n浏览和监控项目文件中的变化\n```\n$ git log\n列出当前分支的所有历史版本\n```\n```\n$ git log --follow [file]\n列出指定文件的历史版本(包括更名)\n```\n```\n$ git diff [first-branch]...[second-branch]\n显示2个分支中内容的不同之处\n```\n```\n$ git show [commit]\n输出指定提交的原始数据和内容的改变\n```\n\n## 重做提交 ##\n擦除錯誤和草稿中历史版本\n```\n$ git reset [commit]\n重置在[commit]后的所有提交，但保留本地改变\n```\n```\n$ git reset --hard [commit]\n放弃所有历史版本和改变，回退到指定的[commit]\n```\n\n## 同步改变 ##\n注册版本库中的书签并交换历史版本\n```\n$ git fetch [bookmark]\n从指定版本库的[bookmark]中下载所有历史版本\n```\n```\n$ git merge [bookmark]/[branch]\n合并分支书签到当前本地分支中去\n```\n```\n$ git push [alias] [branch]\n提交所有本地分支到GitHub中去\n```\n```\n$ git pull\n下载历史更新并合并更改\n```","tags":["git"],"categories":["git"]},{"title":"公益404","url":"%2F404%2Findex.html","content":"\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://szdastone.github.io\" homePageName=\"回到我的主页\"></script>\n"},{"title":"分类","url":"%2Fcategories%2Findex.html"},{"title":"关于","url":"%2Fabout%2Findex.html","content":"\n<blockquote class=\"blockquote-center\">\n练得身形似鹤形，\n千株松下两函经。\n我来问道无馀说，\n云在青天水在瓶。\n</blockquote>\n## 关于我 ##\n- 暂时还没有想好怎么写，先留空，有待来日增加！\n- 可email我，email:dastone@126.com\n- 有什么想和我说的，请留言！\n"},{"title":"琅琊榜","url":"%2Ftop%2Findex.html","content":"<div id=\"top\"></div>\n<script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n<script>AV.initialize(\"DA95G9glULhVzl8u9Dh04Nx1-gzGzoHsz\", \"BfsWj3yfKIWdE3PdHFb29XTO\");</script>\n<script type=\"text/javascript\">\n  console.log(AV)\n  var time=0\n  var title=\"\"\n  var url=\"\"\n  var query = new AV.Query('Counter');\n  query.notEqualTo('id',0);\n  query.descending('time');\n  query.limit(1000);\n  console.log(query)\n  query.find().then(function (todo) {\n    for (var i=0;i<1000;i++){\n      var result=todo[i].attributes;\n\t  console.log(result)\n      time=result.time;\n      title=result.title;\n      url=result.url;\n      var content=\"<a href='\"+\"https://szdastone.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br />\"+\"<font color='#555'>\"+\"阅读次数：\"+time+\"</font>\"+\"<br /><br />\";\n      document.getElementById(\"top\").innerHTML+=content\n    }\n  }, function (error) {\n    console.log(error);\n  });\n</script>\n\n<style>.post-description { display: none; }</style>"},{"title":"schedule","url":"%2Fschedule%2Findex.html"},{"title":"标签","url":"%2Ftags%2Findex.html"}]