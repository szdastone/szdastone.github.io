[{"title":"VuePress入门","url":"%2Fposts%2F2020%2F07%2F7ff5bd00.html","content":"\n## 安装\n\n本文档使用npm来安装，如要使用yarn等工具则自行百度；\n\n<!-- more -->\n\n要使用vuepress-theme-reco的主题，则先安装主题，最好是全局安装。\n\n```\nnpm install @vuepress-reco/theme-cli -g\n```\n\n安装完后就可以使用theme-cli了，如下图：\n\n![image-20200713163310447](assets/image-20200713163310447.png)\n\n:::tip 主题类型\n\n可选的主题的类型有:blog，doc，afternoon-grocery\n\n按文档不同的主题类型则主页会不一样！\n\n但经过我测试，无论是哪种，在目录.vuepress的config.js中的type都是blog。不过afternoon-grocery会将主题作者’午后南杂‘的示例文档下过来。而doc会有一个示例，你输入的title,description,author都没用！只有使用blog才可应用输入的title,description,author等信息。总结下，还是使用缺省的blog来建立博客文档吧。\t\n\n:::\n\n根据上面提示进入到目录来操作；进入到目录后会发现生成了package.json文件，可看看生成package.json文件。\n\n```\n{\n  \"name\": \"my_blog_demo\",\n  \"version\": \"1.0.0\",\n  \"author\": \"reco_luan\",\n  \"scripts\": {\n    \"dev\": \"vuepress dev .\",\n    \"build\": \"vuepress build .\"\n  },\n  \"devDependencies\": {\n    \"vuepress\": \"1.5.0\",\n    \"vuepress-theme-reco\": \"1.4.7\"\n  },\n  \"dependencies\": {\n    \"vue-class-component\": \"^7.2.3\"\n  },\n  \"description\": \"blog demo\"\n}\n```\n\n运行下面命令来安装需要的组件。\n\n```\nnpm install\n```\n\n安装后就可以运行了。如按blog来建立的博客，则缺省界面如下：\n\n![image-20200714093921517](assets/image-20200714093921517.png)\n\n然后就是自己调整符合自己的博客了。后续再慢慢补充吧。","tags":["-VuePress"],"categories":["-VuePress"]},{"title":"Ubuntu中安装与配置Nginx","url":"%2Fposts%2F2019%2F04%2F8979895.html","content":"\n今天在ubuntu18.04下自己安装与配置了下Nginx，现将安装与配置过程记录下来。\n\n<!-- more -->\n\n### 安装Nginx\n\nNginx可以使用apt来直接安装，安装前最好是能更新下：\n\n```\nsudo apt update\nsudo apt install nginx\n```\n\n执行以上操作以后，apt会安装Nginx以及所需的依赖到服务器上!\n\n### 调整防火墙\n\n在测试Nginx前，需要调整下访问服务器的防火墙。一旦安装好，Nginx就通过ufw将其注册为服务，以便能直接允许Nginx来访问。\n\n通过ufw来列出应用配置：\n\n```\nsudo ufw app list\n```\n\n可得到类似如下的结果：\n\n```\n可用应用程序：\nCUPS\nNginx Full\nNginx HTTP\nNginx HTTPS\nOpenSSH\n```\n\n如上所见，Nginx有如下3个可用配置：\n\n- Nginx Full:这个配置打开端口80以及443\n\n- Nginx HTTP:这个配置仅打开端口80\n\n- Nginx HTTPS:这个配置仅打开端口443\n\n  由于暂时不配置SSL，所以只考虑端口80，故输入如下：\n\n  ```\n  sudo ufw allow 'Nginx HTTP'\n  ```\n\n  好，我们检验下，输入：\n\n  ```\n  sudo ufw status\t\n  ```\n\n  注意，如果没有任何输出，那就是没有开防火墙，输入sudo ufw enable打开防火墙，然后在看下状态，如下结果：\n\n  ![1554262400573](https://szdastone-1258479409.cos.ap-hongkong.myqcloud.com/blog/1554262400573.png)\n\n  ### 测试Web服务器\n\n  安装玩Nginx后，Ubuntu18.04就启动了服务。可通过如下命令检测：\n\n  ```\n  systemctl status ngix\n  ```\n\n  ![1554262764804](https://szdastone-1258479409.cos.ap-hongkong.myqcloud.com/blog/1554262764804.png)\n\n  通过上图可看出，服务已经正常启动了。可通过http://localhost来测试。如能看到Nginx缺省页面，则表明服务运行正确！\n\n  ### 管理Nginx服务\n\n  通过systemctl来管理Nginx服务，如下：\n\n  ```\n  sudo systemctl stop nginx #停止服务\n  sudo systemctl start nginx #启动服务\n  sudo systemctl restart nginx #重启服务\n  sudo systemctl reload nginx #重载服务，一般配置修改后可执行该命令\n  sudo systemctl disable nginx #禁止开机启动后就启动服务，缺省是开机就启动Nginx服务\n  sudo systemctl enable nginx #开机启动Nginx服务\n  ```\n\n  ### 配置\n\n  刚刚测试http://localhost，我们看到的页面缺省是放在/var/www/html中的。如果是单一网站，那么修改这个目录的内容就可以了。如果我们申请了域名，希望部署成多站点的网页，那么就必须新建一个目录在/var/www。比如，新申请域名为example.com，那么新建如下目录：\n\n  ```\n  sudo mkdir -p /var/www/example.com/html\n  ```\n\n  使用-p参数以便建立目录时能自动创建未建立的目录。\n\n  然后，修改这个目录的所有者，使用$USER环境变量。\n\n  ```\n  sudo chown -R $USER:$USER /var/www/example.com/html\n  ```\n\n  然后，在修改这个目录的权限：\n\n  ```\n  sudo chmod -R 755 /var/www/example.com\n  ```\n\n  然后，新建一个测试HTML文件index.html在/var/www/example.com/html下。\n\n  ```\n  vim /var/www/example.com/html/index.html\n  ```\n\n  内容如下：\n\n  ```html\n  <html>\n  \t<head>\n  \t\t<title>Welcome to Example.com!</title>\n  \t</head>\n  \t<body>\n  \t\t<h1>Success! The example.com server block is working!</h1>\n  \t</body>\n  </html>\n  ```\n\n  然后，在/etc/nginx/sites-available中创建文件example.com。\n\n  ```\n  sudo vim /etc/nginx/sites-available/example.com\n  ```\n\n  内容如下：\n\n  ```\n  server{\n      listen 80;\n      listen [::]:80;\n      \n      root /var/www/example.com/html;\n      index index.html index.htm index.nginx-debian.html;\n      \n      server_name example.com www.example.com;\n      \n      location / {\n          try_files $uri $uri/ =404;\n      }\n  }\n  ```\n\n  然后，建立一个链接到sites-enabled目录，如下：\n\n  ```\n  sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/\n  ```\n\n  最后，测试下：\n\n  ```\n  sudo nginx -t\n  ```\n\n  如果有必要的话，请重启服务：sudo systemctl restart nginx\n\n  本文参考及翻译自https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04","tags":["Nginx"],"categories":["Nginx"]},{"title":"Ubuntu中安装与配置Python3.7","url":"%2Fposts%2F2019%2F03%2F29cc2b8c.html","content":"\n​\t今天用virtualbox虚拟机安装了一个linux，选择安装的版本为ubuntu 18.04.2。安装后想玩玩python，但我是个初哥，不知怎么安装与配置，只能百度或者看python文档，然后将过程记录下来，如有不妥之处，还请谅解！<!-- more -->\n\n### 1、下载python\n\n首先在[python官网](https://www.python.org/)，找到python对应linux版本的源码，记下地址为：https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz\n\n下载链接可参考下图：\n\n![1553758279859](https://szdastone-1258479409.cos.ap-hongkong.myqcloud.com/blog/1553758279859.png)\n\n在ubuntu中开一个终端，输入如下命令下载：\n\n![1553759204906](https://szdastone-1258479409.cos.ap-hongkong.myqcloud.com/blog/1553759204906.png)\n\n### 2、解压\n\n下载完了就需要将其解压，在ubuntu的终端中输入如下命令：\n\n`tar  -xvzf Python-3.7.3.tgz`\n\n解压完了后发现python解压在当前目录下，可将其复制到指定目录中(非必需，也可在当前目录下操作)，一般将其放置在/usr/local/python目录中。当然可以通过复制命令将已经解压文件复制到/user/local/python，复制命令为：\n\n`sudo cp -r Python-3.7.3 /usr/local/python`\n\n### 3、 安装编译器以及依赖\n\n可参考文档：[https://github.com/pyenv/pyenv/wiki/Common-build-problems](https://github.com/pyenv/pyenv/wiki/Common-build-problems)\n\n如果已经安装则可忽略。\n\n安装依赖前需要更新安装源，如下命令：\n\n`sudo apt-get update`\n\n然后安装依赖：\n\n```\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\nxz-utils tk-dev libffi-dev liblzma-dev python-openssl git --fix-missing\n```\n\n注：同时可安装多个软件，如已安装则会自动忽略掉，其中参数-y表示如需要询问都回答yes。参数--fix-missing自动修复无法安装的依赖。\n\n### 4、配置与安装\n\n在ubuntu的终端中进入到/usr/local/python目录，通过命令来编译python源码，输入如下命令：\n\n`sudo ./configure`\n\n可是却出现如下图的错误：\n\n![1553759667068](https://szdastone-1258479409.cos.ap-hongkong.myqcloud.com/blog/1553759667068.png)\n\n这个是由于系统并没有安装gcc模块导致的，那就安装gcc吧(如果上面依赖安装成功后，不会出现这个错误的！)。通过下面命令来安装：\n\n`sudo apt-get install gcc`\n\n安装完成确定没有错误后，通过下面命令继续配置：\n\n`sudo ./configure`\n\n配置完成以后就进行编译安装，输入如下命令：\n\n `make`\n\n`sudo -H make install`\n\n注意，请使用sudo -H命令，避免模块安装失败！\n\n好了，python安装成功了，可进入到/usr/local/python3目录查看安装情况。\n\n其实，ubuntu18.04缺省就安装了Python模块，在终端中输入python3命令，出现如图界面：\n\n![1553759990680](https://szdastone-1258479409.cos.ap-hongkong.myqcloud.com/blog/1553759990680.png)\n\n细心点会发现Python3命令下的python版本为3.6.7，而我们安装的是3.7.3呀，那怎么处理呢？我们可以通过以下命令来更改默认的版本：\n\n```\ncd /usr/bin\nsudo rm -rf python\nsudo ln -s /usr/local/python3/bin/python3.7 python\n```\n\n### 5 配置pip3\n\n安装完成python后，心情激动，在终端输入pip3 install numpy，结果却出现错误，错误如下：\n\n```\npip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.\n\nCould not fetch URL https:*******: There was a problem confirming the ssl certificate: \nCan't connect to HTTPS URL because the SSL module is not available. - skipping\n```\n\n马上百度，说安装过程需要SSL，找不到SSL模块。上面依赖中要求安装的SSL都已经安装了，可试着再安装下：\n\n```\nsudo apt-get install openssl libssl-dev\n```\n\n如果安装没问题后，输入python3,进入到python环境，导入ssl来看看。\n\n```\nimport ssl\n```\n\n如没有意外一定会错误，错误基本就是‘no moudle named _ssl’；\n\n为什么会这样呢？后来百度才知道配置时需要加上参数--with-ssl，没办法只能继续配置安装了！\n\n```\nsudo ./configure --with-ssl\nsudo make\nsudo -H make install\n```\n\n一切安装完成后，可在终端输入python3进入到python环境，执行import ssl，这样应该不会错误了！\n\n然后输入如下命令使用pip3安装numpy模块！\n\n```\npip3 intall numpy --user\n```\n\n如无意外，一些正常！","tags":["Ubuntu"],"categories":["Python"]},{"title":"gitbook发布","url":"%2Fposts%2F2019%2F01%2Fd601128e.html","content":"\n本文主要介绍gitbook怎样将书籍发布到Github Pages上。 <!-- more -->\n\n### 发布\n\n这里介绍是将书籍发布到Github Pages。如需要了解Github Pages，请参考[Github Pages主页](https://pages.github.com/)。\n\n为了将书籍构建好后放在Github Pages中，需要在本地构建出site格式。这样，就可以通过如下地址进行访问了：\n\n~~~\n<username>.github.io/<project>\n~~~\n\n#### 发布到gh-pages分支\n\n首先需要先安装gh-pages。在系统终端输入如下命令：\n\n```\nc:\\>npm i gh-pages -g\n```\n\n这时在系统终端可输入gh-pages命令了，如要查看怎么使用，可在终端输入如下命令：\n\n```\nc:\\>gh-pages --help\n```\n\n如已经通过gitbook build命令构建书籍了，则会在目录下有个_book子目录，该目录就是本书籍的静态网页了。通过gh-pages发布到Github就可以了。在终端输入如下命令:\n\n```\nc:\\>gh-pages -d _book\n```\n\n如发布成功后，则会发现在github的书籍项目中除了master分支多了一个gh-pages分支了。这是就需要明白这2个分支的作用。\n\n- master分支：保存书籍的源码\n- gh-pages分支：保存书籍编译以后的静态网页\n\n#### 上传源码到master分支\n\n好了，现在我们需要将源码都上传到master分支。\n\n首先，我们必须在书籍目录下建立文件.gitignore，不需要上传的文件忽略掉；文件.gitignore的内容如下代码。\n\n~~~\n*~\n_book\nnode_modules\n~~~\n\n然后将目录下除了.gitignore忽略的文件都上传到master分支。\n\n~~~\nc:\\>book\\git add.\nc:\\>book\\git commit -m \"add source\"\nc:\\>book\\git push -u origin master\n~~~\n\n好了。我们可以通过```<username>.github.io/<project>```来访问本书籍了。\n\n\n","tags":["gitbook"],"categories":["gitbook"]},{"title":"Gitbook插件和主题","url":"%2Fposts%2F2019%2F01%2F4dd0f083.html","content":"\n本文主要介绍gitbook的插件以及主题。 <!-- more -->\n\n### 插件\n\n插件是扩展Gitbook功能(电子书和网站)的最佳方式。现有的插件功能繁多：可支持数学公司，谷歌分析等。\n\n#### 怎么找插件呢？\n\n可以在[plugins.gitbook.com](plugins.gitbook.com)查找或者在[NPM](https://www.npmjs.com/)或者[Github](https://github.com/GitbookIO/gitbook)上找插件。\n\nGitbook的插件在NPM上都是以gitbook-plugin开头的，很容易查找的。\n\n#### 插件的安装和配置\n\n插件安装很简单，只需要在book.json的plugins中增加相应插件就可以了。配置则需要根据不同插件来分别对待，但都是保存在pluginsConfig下的。\n\n\n\n下面就常用的几款插件进行简单介绍下。\n\n##### Disqus\n\n[Disqus](https://plugins.gitbook.com/plugin/disqus)是个非常流行的网站继承评论系统工具。Gitbook添加了该插件，则可以让读者在网页下面进行评论。\n\n要使用该插件，则在book.json中增加如下代码。\n\n```\n{\n    \"plugins\": [\"disqus\"],\n    \"pluginsConfig\": {\n        \"disqus\": {\n            \"shortName\": \"XXXXXXX\"\n        }\n    }\n}\n```\n\n代码中的shortName是在[disqus官网](https://disqus.com/)上创建的website获得的唯一关键字。\n\n但是如果某一个页面不想使用disqus的话，则可在页面中指定，如下代码。\n\n```\n---\ndisqus: false\n---\n\n# My Page without disqus\n```\n\n这里再说下shortName，希望大家能明白。\n\n在[disqus官网](https://disqus.com/)先注册一个账号，或者通过google,twitter,facebook账号授权注册都行。注册完了在Account页面可以看到Username，这个Username就是需要填写的shortName。\n\n是不是这样就OK了呢？肯定不行，这是页面加载不上Disqus，为啥呢？需要你为你的网页增加一个site，登录后点击[Admin](https://disqus.com/admin/)，进入到管理页面。在管理页面选择[Installing Disqus](https://disqus.com/admin/install/)；然后在这个页面选择[Create a Site](https://disqus.com/admin/create/)，按要求填写后就可以管理你的Site了，在Site的设置页面填写好Website Name以及Website URL就可以了。注意的是Website URL是你访问的域名，比如<username>.github.io。\n\n设置好了，再次编译，发布以后就可以正常看到Disqus了。\n\n\n\n##### books\n\n这个是国人写的一个综合插件，是\"为了节约空间而写的一个插件\"。\n\n[books插件地址](https://github.com/liushilive/gitbook-plugin-books)\n\n由于该地址有详细介绍，我这里不在赘述了。\n\n### 主题\n\n从版本3.0.0以后，Gitbook能定制主题了。缺省书籍使用了theme-default主题。\n\n#### 主题的结构\n\n其实主题也是一个插件，但它包含了模板和资源。任意主题都是继承自缺省主题，但可选覆盖任何主题模板。\n\n| 目录                       | 描述                                           |\n| -------------------------- | ---------------------------------------------- |\n| _layouts                   | 包含了所有模板的主目录                         |\n| _layouts/website/page.html | 单一页面模板                                   |\n| _layouts/ebook/page.html   | 在ebook生成时用到的单一页面模板(PDF<ePub,Mobi) |\n\n#### 扩展/定制主题\n\n作者可通过书籍的源代码直接扩展主题的模板(不需要另外创建主题)。模板首先会在数据的_layouts文件夹中解析，然后在安装插件/主题。\n\n#### 主题插件\n\nGitbook缺省的主题一般都够用了。除了用户可自行扩展主题外，还可通过NPM搜索主题插件。在NPM上，gitbook的主题插件一般都是以gitbook-theme开头的。\n\n下面介绍几种常用主题插件。\n\n##### theme-default\n\n这个是缺省插件。这里将showLevel设为true，这样就会显示标题前面的数字索引，默认是不显示的。\n\n```\n{\n    \"theme-default\": {\n        \"showLevel\": true\n    }\n}\n```\n\n##### theme-comscore\n\ncomscore可以为标题增加颜色，而缺省主题都是黑白色的。\n\n[插件地址](https://plugins.gitbook.com/plugin/theme-comscore)\n\n要使用该插件，只需要将如下代码加入到book.json中。\n\n```\n{\n\t\"plugins\": [\n        \"theme-comscore\"\n \t]\n }\n```\n\n\n\n\n\n插件太多，只有选择自己合适的才是最好的。\n\n可参考如下网址的插件介绍。\n\n[Gitbook插件](http://gitbook.zhangjikai.com/plugins.html)\n\n","tags":["gitbook"],"categories":["gitbook"]},{"title":"Gitbook命令和配置","url":"%2Fposts%2F2019%2F01%2F7ec0429a.html","content":"\n本文主要介绍gitbook的几个常用命令以及一些基本配置。 <!-- more -->\n\n### 命令\n\n这里介绍下gitbook的几个常用命令。\n\n#### 初始化init\n\ngitbook init命令可初始化书籍目录。\n\n在使用这个命令时，首先需要新建立一个目录，然后在这个目录下新增加README.md与SUMMARY.md；如新建目录为book,则该目录结构为：\n\n```\nc:\\>tree book /f\n\tREADME.md\n\tSUMMARY.md\n```\n\n其中README.md是对本书籍的介绍，这个是必须文件。\n\nSUMMARY.md是本书籍的目录结构。比如内容为：\n\n```\n# Summary\n\n* [Introduction](README.md)\n* [第一章](chapter1/README.md)\n    * [第一节](chapter1/section1.1.md)\n    * [第二节](chapter1/section1.2.md)\n* [第二章](chapter2/README.md)\n```\n\n以上为示例。大家可根据自己实际需要来编写目录；\n\n编号目录后再系统终端的命令提示符下，输入命令：\n\n```\nc:\\>book\\gitbook init\n```\n\n命令完成后，你会发现按你所编写的目录结构生成了初始的文件，只需要按每个文件编写内容即可了。\n\n#### 预览serve\n\n如你编写好了内容要预览的话，可使用如下命令：\n\n```\nc:\\>book\\gitbook serve\n```\n\n该命令成功以后，则可以在本地浏览器通过http://localhost:4000 来查看gitbook运行的效果了。\n\n#### 生成build\n\n如编写好书籍后，可通过build命令来生成静态网页：\n\n```\nc:\\book\\gitbook build\n```\n\n通过build命令后，会发现在book目录下会有一个新的目录_book，所有静态网页的内容都在这个目录下，可将这个目录的所有内容放在服务器上运行。其实在运行serve命令时就会首先运行build命令来生成静态网页，然后serve自行打开一个web服务器并通过监控4000端口来发布静态网页。\n\n#### 其它命令\n\n注意的是gitbook-cli和gitbook是2个不同软件，gitbook-cli会将gitbook不同版本下载到C:\\使用者\\用户登录名\\\\.gitbook中，但可通过设置GITBOOK_DIR环境变量来指定不同的文件夹。\n\n#### gitbook-cli的帮助信息\n\n```\nc:\\>gitbook --help\n```\n\n\n\n##### 列出gitbook所有能用的命令\n\n```\nc:\\>gitbook help\n```\n\n##### 指定版本\n\nGItbook CLI会使用缺省的最新Gitbook版本，但你也可以通过参数--gitbook来指定版本，如：\n\n```\nc:\\>gitbook build ./book --gitbook=2.0.1\n```\n\n可列出指定版本可用的命令：\n\n```\nc:\\>gitbook help --gitbook=2.0.1\n```\n\n#### 版本管理\n\n##### 列出所有版本\n\n```\nc:\\>gitbook ls\n```\n\n##### 列出NPM上可用的版本\n\n```\nc:\\>gitbook ls-remote\n```\n\n##### 安装指定版本\n\n```\nc:\\>gitbook fetch 2.1.0\n# 或者前一个版本\nc:\\>gitbook fetch beta\n```\n\n##### 更新到最新版本\n\n```\nc:\\>gitbook update\n```\n\n##### 卸载指定版本\n\n```\nc:\\>gitbook uninstall 2.0.1\n```\n\n##### 使用本地文件夹做GitBook的版本(用于开发)\n\n```\nc:\\>gitbook alias ./mygitbook latest\n```\n\n##### 调试\n\n可使用参数选项--log=debug 和--debug来得到各详细错误信息，以便能进行排错；如：\n\n```\nc:\\>gitbook build ./ --log=debug --debug\n```\n\n### 配置\n\n其实Gitbook是零配置的。如果不想做出其他效果，那么就可以不进行任何配置。\n\n如要进行配置的话，那么需要自己建立一个book.json文件在书籍目录下。\n\n先了解下book.json的基本配置吧。\n\n#### 基本配置\n\n| 变量       | 描述                                                    |\n| ---------- | ------------------------------------------------------- |\n| root       | 包含书籍所有文件的根文件夹                              |\n| structure  | 指定README,SUMMARY,GLOSSARY等的路径                     |\n| title      | 书籍的标题，缺省值从README获取                          |\n| decription | 书籍的描述，缺省值从README获取                          |\n| author     | 书籍的作者                                              |\n| isbn       | 书籍的ISBN                                              |\n| language   | 书籍的语言，缺省为en                                    |\n| direction  | 文字的排版方向。可以为rtl或ltr,缺省值因爱language的设定 |\n| gitbook    | Gitbook将使用的版本，可指定版本或接受如“>=3.0.0”的条件  |\n\n#### 插件Plugins\n\n插件以及其配置都是指定在book.json中。从3.0.0版本以后，Gitbook可使用主题。\n\n| 变量          | 描述             |\n| ------------- | ---------------- |\n| plugins       | 要加载的插件列表 |\n| pluginsConfig | 插件的配置       |\n\n#### Structure\n\n除了root变量外，可为gitbook指定README,SUMMARY,GLOSSARY,LANGUAGES等文件的名称，比如README使用缺省名称为README.md。这些文件将放在书籍的根目录(或者放在不同语言的根目录下)。形如dir/MY_README.md的路径是不接受的。\n\n| 变量                | 描述                                |\n| ------------------- | ----------------------------------- |\n| structure.readme    | Readme文件的名称，缺省README.md     |\n| structure.summary   | Summary文件的名称，缺省SUMMARY.md   |\n| structure.glossary  | Glossary文件的名称，缺省GLOSSARY.md |\n| structure.languages | Languages文件的名称，缺省为LANGS.md |\n\n#### PDF选项\n\nPDF的输出可在book.json中配置，支持的参数如下：\n\n| 变量              | 描述                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| pdf.pageNumbers   | 在每页的底部增加页码数，缺省为true                           |\n| pdf.fontSize      | 设置字体大小，缺省为12                                       |\n| pdf.fontFamily    | 设置字体，缺省为Arial                                        |\n| pdf.paperSize     | 设置纸张大小，可选为'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'legal', 'letter'，缺省为a4 |\n| pdf.margin.top    | 页眉，缺省为56                                               |\n| pdf.margin.bottom | 页尾，缺省为56                                               |\n| pdf.margin.right  | 右边距，缺省为62                                             |\n| pdf.margin.left   | 左边距，缺省为62                                             |\n\n","tags":["gitbook"],"categories":["gitbook"]},{"title":"Gitbook简介及安装","url":"%2Fposts%2F2019%2F01%2F6c790f1e.html","content":"\n\n### 简介\n\n​\t本手册基于Gitbook版本2.3.2，主要就Gitbook的安装、配置、插件、主题等进行介绍与说明。\n\n​\t由于本人在Gitbook上是初学，故多会参考或翻译官方文档以及网上一些内容。由于本人水平有限，如翻译或引用不正确，请多包涵！\n<!-- more -->\n​\t\t[Gitbook主页](https://www.gitbook.com)\n\n​\t\t[Gitbook在Github的地址](https://github.com/GitbookIO/gitbook/)\n\n​\t\t[Gitbook Toolchain Documentation](https://toolchain.gitbook.com/)\n\n### 安装\n\n​\tGitbook的安装还是比较简单的，本文的介绍都是基于本地安装Gitbook,但如果[官网](https://www.gitbook.com)提供的服务已经满足了您的需求，则可忽略本文档。由于本人使用的window系统，以下介绍也是基于window系统介绍的。\n\n\n#### 系统要求\n\n安装Gitbook很容易，但是系统必须满足如下要求：\n\n- NodeJS(建议v4.00或以上)\n\nGitbook可安装在Windows,Linux,Unix或者Mac OS X上。\n\n#### 通过NPM安装\n\n最方便的就是通过NPM来安装Gitbook。在系统终端的提示符下，只需要简单的输入如下命令就可以安装Gitbook。\n\n```\nc:\\>npm install gitbook-cli -g\n```\n\ngitbook-cli是一个可在同一个操作系统下安装和使用多个Gitbook的应用。它能自动安装Gitbook的最合适版本来编译书籍。\n\n由于使用windows系统，安装完成以后却无法使用gitbook命令，后来查资料才搞明白，设置好路径就可以了。一般安装了gitbook-cli后，在C:\\使用者\\用户登录名\\\\.gitbook下的versions目录下会有对应版本的gitbook。在npm命令中使用参数-g，则表明将gitbook-cli全局安装到Node对应的路径下。该路径为C:\\使用者\\用户登录名\\\\.nodejs\\node_global；在该路径下应该可发现gitbook命令，如发现则证明安装正确了，将该路径加入到系统路径即可。设置好后在系统终端就可以使用gitbook命令了。","tags":["gitbook"],"categories":["gitbook"]},{"title":"Git简单说明书","url":"%2Fposts%2F2018%2F11%2F722e0850.html","content":"\nGit是开源的分布式版本控制系统，可以很方便在笔记本或电脑上操作Github。这个简单说明书总结了Git的常用命令，以便各位能做个快速的参考！<!-- more -->\t\n## 安装GIT ##\nGitHub提供了包含有图形用户界面的桌面客户端，并为更高级场景提供了最常用的版本库操作和自动更新命令。\n### Windows版本的GitHub ###\nhttps://windows.github.com\n### Mac版本的GitHub ###\nhttp://mac.github.com\n### 其他版本的Git ###\nGit为Linux和POSIX系统发布的可用版本在GIT SCM官网上。\nhttp://git-scm.com\n\n## 配置工具 ##\n为所有本地版本库配置用户信息。Git的设置文件为.gitconfig。全局配置在用户主目录，项目配置在项目目录。\n```\n$ git config --global user.name \"[name]\"\n设置提交代码时的用户名称\n```\n```\n$ git config --global user.email \"[email address]\"\n设置提交代码时的电子邮箱\n```\n```\n$ git config --global color.ui auto\"\n设置命令提示的输出颜色\n```\n\n## 建立版本库 ##\n开始建立一个新的版本库或从指定的URL中获取一个新的版本库。\n```\n$ git init [project-name]\n按指定名称建立一个新的版本库\n```\n```\n$ git clone [url]\n下载一个项目以及其完整的历史版本\n```\n\n## 显示信息 ##\n审查要提交的编辑和草稿\n```\n$ git status\n显示要提交的所有新的和更改的文件\n```\n```\n$ git diff\n显示暂存区和工作区的差别\n```\n```\n$ git add [file]\n将要版本控制的文件加入到暂存区中\n```\n```\n$ git diff --staged\n显示暂存区中和最新版本的文件之间的差别\n```\n```\n$ git reset [file]\n将文件从暂存区中移除，但保留文件的内容\n```\n```\n$ git commit -m \"[descriptive message]\"\n将暂存区中文件提交到版本库中\n```\n\n## 分支操作 ##\n分支操作的一系列命令\n```\n$ git branch\n列出当前版本库中所有本地分支\n```\n```\n$ git branch 【branch-name】\n建立一个新的分支\n```\n```\n$ git checkout [branch-name]\n切换到指定分支并更新工作区目录\n```\n```\n$ git merge [branch]\n将指定分支的历史记录合并到当前分支中去\n```\n```\n$ git branch -d [branch-name]\n删除指定的分支\n```\n\n## 撤销 ##\n重分配和删除版本控制文件\n```\n$ git rm [file]\n从工作区删除文件，并将删除放入在暂存区\n```\n```\n$ git rm --cached [file]\n将文件移除版本控制，但保留本地文件在工作区\n```\n```\n$ git mv [file-original] [file-renamed]\n修改文件名，并将这个改名放在暂存区\n```\n\n## 忽略文件 ##\n将临时文件和目录排除在版本控制之外\n\n```\n*.log\nbuild/\ntemp-*\n一个名为.gitignore的文本文件，它会将符合指定格式匹配的文件和路径移除在版本控制中\n```\n```\n$ git ls-files --other --ignored --exclude-standard\n列出项目中所有忽略的文件\n```\n\n## 暂存区管理 ##\n暂存区可提交或恢复未完成的改变\n```\n$ git stash\n临时保存所有修改的文件\n```\n```\n$ git stash pop\n恢复最近的临时保存的文件\n```\n```\n$ git stash list\n显示暂存区中的所有改变\n```\n```\n$ git stash list\n放弃最近的暂存区中的改变\n```\n\n## 日志查看 ##\n浏览和监控项目文件中的变化\n```\n$ git log\n列出当前分支的所有历史版本\n```\n```\n$ git log --follow [file]\n列出指定文件的历史版本(包括更名)\n```\n```\n$ git diff [first-branch]...[second-branch]\n显示2个分支中内容的不同之处\n```\n```\n$ git show [commit]\n输出指定提交的原始数据和内容的改变\n```\n\n## 重做提交 ##\n擦除錯誤和草稿中历史版本\n```\n$ git reset [commit]\n重置在[commit]后的所有提交，但保留本地改变\n```\n```\n$ git reset --hard [commit]\n放弃所有历史版本和改变，回退到指定的[commit]\n```\n\n## 同步改变 ##\n注册版本库中的书签并交换历史版本\n```\n$ git fetch [bookmark]\n从指定版本库的[bookmark]中下载所有历史版本\n```\n```\n$ git merge [bookmark]/[branch]\n合并分支书签到当前本地分支中去\n```\n```\n$ git push [alias] [branch]\n提交所有本地分支到GitHub中去\n```\n```\n$ git pull\n下载历史更新并合并更改\n```","tags":["git"],"categories":["git"]},{"title":"Hexo主题NexT的个性化设置","url":"%2Fposts%2F2017%2F10%2F3f48280e.html","content":"\n## Hexo主题NexT的个性化设置 ##\n终于完成了博客的搭建，在搭建过程中也曾遇到一些问题，我将设置中对自己印象比较深刻的记录下来，或许能增加自己的记忆，也希望能给别人带来一丝帮助！\n<!-- more -->\n下图为我Hexo的版本信息，如各位在设置中和我介绍的不同，请查看下版本是否一致！\n\n![](https://szdastone-1258479409.cos.ap-hongkong.myqcloud.com/blog/1571301514857.png)\n\nNext的版本为5.1.1，各位可在主题配置文件_config.yml的最后几行中看到，不再贴图了！\n\n### 头像设置 ###\n这个要在站点设置_config.yml中进行设置，可设置为：\n```\n avatar: url地址\n```\n也可以不设置，直接在source目录下的images中放置一个avatar.gif的文件就可以了。\n\n### 网站图标的设置 ###\n这个设置其实很简单，可以在icon网站下载一个自己喜欢的icon图标，然后更名为favicon.ico，放置在source目录下就可以了。\n\n### 404页面设置 ###\n在source目录下建一个404.html目录，内容如下：\n```\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://dastone.tk\" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n```\n但是要注意的就是在站点配置文件_config.yml的skip_render中将404.html加上。\n\n### permalink设置 ###\n站点配置文件_config.yml中的permalink缺省为：\n```\npermalink: :year/:month/:day/:title/\n```\n这样的话在url中每篇博客名字很长，而且还中英文夹杂着，老实说，我不太喜欢这种模式，所以我做了如下设置：\n```\npermalink: title.html\n```\n然后在scaffolds目录下的post.md文件中文件了permalink；在每篇博客中我都会设置好英文的permalink，这样在url中看上去就简介多了。\n\n### 添加标签、分类页面 ###\n这个简单介绍下，以供参考！\n在博客目录的Git Bash中，输入如下命令：\n```\nhexo new page tags\n```\n然后修改标签页，关闭评论，如下代码：\n```\n---\ntitle: 标签\ndate: 2017-10-16 16:52:37\ntype: \"tags\"\ncomments: false\n---\n```\n分类页类似，输入命令：\n```\nhexo new page categories\n```\n然后修改分类页，关闭评论，如下代码：\n```\n---\ntitle: 分类\ndate: 2017-10-16 16:53:40\ntype: \"categories\"\ncomments: false\n---\n```\n暂时介绍到这里，如还有何疑问，或者有些设置没介绍的，可以和我一起探讨。谢谢大家！\n\n\n","tags":["个性化"],"categories":["博客"]},{"title":"GitHub+Hexo 搭建个人博客记录","url":"%2Fposts%2F2017%2F05%2Fbb97c66a.html","content":"\n## 前言： ##\n\n下面就搭建过程做个简单的介绍，如有不妥或不明之处，还请多多留言，我一定抽空回答！谢谢！\n<!-- more -->\n\n## 搭建步骤简介： ##\n\n- 安装Git\n- 安装Node.js\n- 安装Hexo\n- 配置Hexo\n- GitHub创建个人仓库\n- 获得个人网站域名\n- 绑定域名\n- 更换主题\n- 发布文章\n- 其他\n\n\n### 安装Git ###\nGit的安装这里不介绍了。如需要了解Git,可参考[廖雪峰老师的Git教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000 \"廖雪峰老师的Git教程\")，\n记得里面比较复杂的就是SSH key了，这个怎么配置以及在GitHub上怎样设置密钥，请参考[GitHub+Hexo 搭建个人网站详细教程](https://zhuanlan.zhihu.com/p/26625249 \"GitHub+Hexo 搭建个人网站详细教程\")。\n\n### 安装Node.js ###\n我是在windows下安装的，这个很简单，不做介绍！\nNodejs的官网下载页：[https://nodejs.org/en/download/](https://nodejs.org/en/download/ \"https://nodejs.org/en/download/\")，请选择适合自己操作系统的对应版本，安装完成后请检验下Nodejs和npm是否安装成功。\n\n### 安装Hexo ###\n安装好了Nodejs了，就可通过npm来安装Hexo了。\n\n    $ npm install -g hexo-cli\n安装好了后就可以建立博客了。可先建立一个目录，然后初始化。如：\n```\n$ cd blog\n$ hexo init blog\n$ npm install\n```\n### 配置Hexo ###\n在自己建立博客的目录下，找到配置文件，如_config.yml，这个配置文件称为站点配置文件。这个配置文件中有几个点需要注意，这里说明下：\n| 设定     | 描述          |\n| :------- | :--: |\n|title     | 网站标题|\n|subtitle  | 网站子标题|\n|author     | 网站作者|\n|description  | 网站描述|\n|language  | 网站语言，预设为en,中文设置为zh-Hans|\n其他设定可参考官网：[https://hexo.io/zh-tw/docs/configuration.html](https://hexo.io/zh-tw/docs/configuration.html \"https://hexo.io/zh-tw/docs/configuration.html\")\n最后说下和github进行关联的设置，类型为git,repo请填写上你在github建立仓库的完整路径，记住最后要加上.git;master表明是你在github建立仓库的主分支。有关github仓库的建立在后续部分会有解释！\n当配置好了Hexo,则可在本地查看博客的效果了。\n\n```\n$ hexo g\n$ hexo s\n```\n第一个命令是生成博客，第二个博客是启动服务，如一切正常，则可以通过在浏览器中输入如下URL来预览:\n```\nlocalhost:4000\n```\n由于我更改了主题及其他配置，则不贴图了。\n### GitHub创建个人仓库 ###\n\n登录到GitHub<怎么不知道Github官网地址,请度娘>,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号。\n然后用注册好的帐号进入到GitHub,点击GitHub中的New repository创建新仓库，仓库名应该为：http://用户名.github.io 这个用户名一般使用你的GitHub帐号名称代替。\n\n\n### 获得个人网站域名 ###\n\n域名是网站的入口，一般我们都喜欢给自己淘个好记或对自己有意义的域名。常见域名有com,cn,net,org,me,info等后缀，根据个人喜好，选择不同的后缀，比如我选择就是免费的tk后缀。在国内域名是需要备案才能上线的。然而使用GitHub托管我们的网站，则可不需要备案，因为托管我们的网站内容的服务器在美国。域名在国内备案流程比较繁杂，需要实名，还需要拍照什么的，大约时间需要一周，比较折腾，但使用GitHub则免除了这道手续，这也是我选择使用GitHub来做个人博客的某个原因之一。\n申请域名肯定是用万网了，不过万网被阿里收购了，我们可以只是申请域名，而不需要购买阿里云服务器，可以只使用万网来申请域名以及解析域名。我目前使用的是免费tk域名，大家可以在以下网站去申请：[tk域名申请网站](https://my.freenom.com/clientarea.php)，[万网](https://wanwang.aliyun.com/)。\n\n### 绑定域名 ###\n其实Github提供的域名是可以访问的，比如我的Github域名：szdastone.github.io,但是都希望有个个性化、好记的域名，那就需要绑定自己的域名了。我这里使用万网来进行域名解析的，如有其他域名代理商的解析也应该差不多的，不再赘述，有不明之处，请多度娘。\n图上有三条解析记录，192.30.252.153,192.30.252.154是GitHub的地址。第一个记录类型是CNAME，CNAME的记录值是：用户名.github.io。域名设置好后，还需要在Github上做设置，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名。\n记住一定要按save按钮来保存。这时间如果我们在浏览器输入自己域名：dastone.tk，会出现错误。\n\n这是因为缺少一个配置，先进入本地博客文件夹的source目录下，创建一个记事本文件，输入你的域名，记住最好不要带www，如果有www，那么以后访问时都要输入www。所以建议不要带www。\n注意请保存为CNAME ，没有后缀，也不是txt文件。\n完成后在博客目录右键进入到Git Bash,输入如下命令：\n\n``` \n$ hexo clean\n$ hexo g\n$ hexo d\n```\n再打开浏览器在地址栏输入你的域名将会进入你刚才搭建的博客网站，是不是很神奇呢？\n\n### 更换主题 ###\n\n一般我们都不会使用Hexo默认的主题，可通过主题传送门：Themes来更换主题。我使用的是Next主题。在博客目录右键进入到Git Bash,输入如下命令：\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n这是将Next主题下载到博客目录的themes主题下的next文件夹中。打开站点的_config.yml配置文件，修改主题为next。这部分不再介绍了，可查看[Next详细文档](http://theme-next.iissnan.com/getting-started.html)。\n\n### 发布文章 ###\n\n开始发布博客文章，在命令行中输入：\n```\nhexo n \"新博客\"\n```\n在博客的source文件夹中的_post文件夹中多了一个“新博客.md”的文件，使用Markdown编辑器打开，然后就可以开始编辑自己的博客了。\n\n### 其他 ###\n由于搭建时间与记录时间间隔太长，有些写的不太畅顺。如各位有何建议或者想法，请多与我沟通，大家一起学习，一起进步！\n","tags":["博客"],"categories":["博客"]},{"title":"关于","url":"%2Fabout%2Findex.html","content":"\n{% cq %}\n练得身形似鹤形，\n千株松下两函经。\n我来问道无馀说，\n云在青天水在瓶。\n{% endcq %}\n## 关于我 ##\n- 暂时还没有想好怎么写，先留空，有待来日增加！\n- 可email我，email:dastone@126.com\n- 有什么想和我说的，请留言！\n"},{"title":"schedule","url":"%2Fschedule%2Findex.html"},{"title":"分类","url":"%2Fcategories%2Findex.html"},{"title":"标签","url":"%2Ftags%2Findex.html"},{"title":"公益404","url":"%2F404%2Findex.html","content":"\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://szdastone.github.io\" homePageName=\"回到我的主页\"></script>\n"},{"title":"排行榜","url":"%2Ftop%2Findex.html","content":"<div id=\"top\"></div>\n<script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n<script>AV.initialize(\"DA95G9glULhVzl8u9Dh04Nx1-gzGzoHsz\", \"BfsWj3yfKIWdE3PdHFb29XTO\");</script>\n<script type=\"text/javascript\">\n  console.log(AV)\n  var time=0\n  var title=\"\"\n  var url=\"\"\n  var query = new AV.Query('Counter');\n  query.notEqualTo('id',0);\n  query.descending('time');\n  query.limit(1000);\n  console.log(query)\n  query.find().then(function (todo) {\n    for (var i=0;i<1000;i++){\n      var result=todo[i].attributes;\n\t  console.log(result)\n      time=result.time;\n      title=result.title;\n      url=result.url;\n      var content=\"<a href='\"+\"https://szdastone.github.io\"+url+\"'>\"+title+\"</a>\"+\"<br />\"+\"<font color='#555'>\"+\"阅读次数：\"+time+\"</font>\"+\"<br /><br />\";\n      document.getElementById(\"top\").innerHTML+=content\n    }\n  }, function (error) {\n    console.log(error);\n  });\n</script>\n\n<style>.post-description { display: none; }</style>"}]